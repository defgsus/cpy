
/* generated by lolpig on 2016-12-29 22:46:15.900196 */

#include <python3.4/Python.h>
#include <python3.4/structmember.h>
#include "vec_module.h"

#ifndef CPPY_ERROR
#   include <iostream>
#   define CPPY_ERROR(arg__) { std::cerr << arg__ << std::endl; }
#endif

/* compatibility checks */
#include <type_traits>
static_assert(std::is_same<ssizessizeargfunc,
    PyObject*(*)(PyObject*, Py_ssize_t, Py_ssize_t)>::value, "lolpig/python api mismatch");
static_assert(std::is_same<reprfunc,
    PyObject*(*)(PyObject*)>::value, "lolpig/python api mismatch");
static_assert(std::is_same<ternaryfunc,
    PyObject*(*)(PyObject*, PyObject*, PyObject*)>::value, "lolpig/python api mismatch");
static_assert(std::is_same<getattrfunc,
    PyObject*(*)(PyObject*, char*)>::value, "lolpig/python api mismatch");
static_assert(std::is_same<lenfunc,
    Py_ssize_t(*)(PyObject*)>::value, "lolpig/python api mismatch");
static_assert(std::is_same<ssizeargfunc,
    PyObject*(*)(PyObject*, Py_ssize_t)>::value, "lolpig/python api mismatch");
static_assert(std::is_same<allocfunc,
    PyObject*(*)(_typeobject*, Py_ssize_t)>::value, "lolpig/python api mismatch");
static_assert(std::is_same<objobjproc,
    int(*)(PyObject*, PyObject*)>::value, "lolpig/python api mismatch");
static_assert(std::is_same<inquiry,
    int(*)(PyObject*)>::value, "lolpig/python api mismatch");
static_assert(std::is_same<getiterfunc,
    PyObject*(*)(PyObject*)>::value, "lolpig/python api mismatch");
static_assert(std::is_same<ssizeobjargproc,
    int(*)(PyObject*, Py_ssize_t, PyObject*)>::value, "lolpig/python api mismatch");
static_assert(std::is_same<setattrfunc,
    int(*)(PyObject*, char*, PyObject*)>::value, "lolpig/python api mismatch");
static_assert(std::is_same<iternextfunc,
    PyObject*(*)(PyObject*)>::value, "lolpig/python api mismatch");
static_assert(std::is_same<setattrofunc,
    int(*)(PyObject*, PyObject*, PyObject*)>::value, "lolpig/python api mismatch");
static_assert(std::is_same<richcmpfunc,
    PyObject*(*)(PyObject*, PyObject*, int)>::value, "lolpig/python api mismatch");
static_assert(std::is_same<ssizessizeobjargproc,
    int(*)(PyObject*, Py_ssize_t, Py_ssize_t, PyObject*)>::value, "lolpig/python api mismatch");
static_assert(std::is_same<printfunc,
    int(*)(PyObject*, FILE*, int)>::value, "lolpig/python api mismatch");
static_assert(std::is_same<initproc,
    int(*)(PyObject*, PyObject*, PyObject*)>::value, "lolpig/python api mismatch");
static_assert(std::is_same<objobjargproc,
    int(*)(PyObject*, PyObject*, PyObject*)>::value, "lolpig/python api mismatch");
static_assert(std::is_same<descrgetfunc,
    PyObject*(*)(PyObject*, PyObject*, PyObject*)>::value, "lolpig/python api mismatch");
static_assert(std::is_same<unaryfunc,
    PyObject*(*)(PyObject*)>::value, "lolpig/python api mismatch");
static_assert(std::is_same<traverseproc,
    int(*)(PyObject*, visitproc, void*)>::value, "lolpig/python api mismatch");
static_assert(std::is_same<destructor,
    void(*)(PyObject*)>::value, "lolpig/python api mismatch");
static_assert(std::is_same<newfunc,
    PyObject*(*)(_typeobject*, PyObject*, PyObject*)>::value, "lolpig/python api mismatch");
static_assert(std::is_same<binaryfunc,
    PyObject*(*)(PyObject*, PyObject*)>::value, "lolpig/python api mismatch");
static_assert(std::is_same<visitproc,
    int(*)(PyObject*, void*)>::value, "lolpig/python api mismatch");
static_assert(std::is_same<getter,
    PyObject*(*)(PyObject*, void*)>::value, "lolpig/python api mismatch");
static_assert(std::is_same<freefunc,
    void(*)(void*)>::value, "lolpig/python api mismatch");
static_assert(std::is_same<setter,
    int(*)(PyObject*, PyObject*, void*)>::value, "lolpig/python api mismatch");
static_assert(std::is_same<getattrofunc,
    PyObject*(*)(PyObject*, PyObject*)>::value, "lolpig/python api mismatch");
static_assert(std::is_same<descrsetfunc,
    int(*)(PyObject*, PyObject*, PyObject*)>::value, "lolpig/python api mismatch");
static_assert(std::is_same<hashfunc,
    Py_hash_t(*)(PyObject*)>::value, "lolpig/python api mismatch");


/* the python c-api tango */

extern "C" {

    /* ---- classes ---- */

    /* ---- class some ---- */

    static const char* Some_doc_string = "";

    /* Creates new instance of some class. */
    PyObject* create_Some(struct _typeobject * type, PyObject *, PyObject *)
    {
        return PyObject_New(PyObject, type);
    }

    /* Deletes a some instance */
    void destroy_Some(PyObject* self)
    {
        self->ob_type->tp_free(self);
    }

    /* https://docs.python.org/3/c-api/typeobj.html */
    static PyTypeObject Some_type_struct =
    {
        PyVarObject_HEAD_INIT(NULL, 0)
        /* tp_name */           static_cast<const char*>        ("vec.some"),
        /* tp_basicsize */      static_cast<Py_ssize_t>         (128),
        /* tp_itemsize */       static_cast<Py_ssize_t>         (NULL),
        /* tp_dealloc */        static_cast<destructor>         (destroy_Some),
        /* tp_print */          static_cast<printfunc>          (NULL),
        /* tp_getattr */        static_cast<getattrfunc>        (NULL),
        /* tp_setattr */        static_cast<setattrfunc>        (NULL),
        /* tp_reserved */       static_cast<void*>              (NULL),
        /* tp_repr */           static_cast<reprfunc>           (NULL),
        /* tp_as_number */      static_cast<PyNumberMethods*>   (NULL),
        /* tp_as_sequence */    static_cast<PySequenceMethods*> (NULL),
        /* tp_as_mapping */     static_cast<PyMappingMethods*>  (NULL),
        /* tp_hash */           static_cast<hashfunc>           (NULL),
        /* tp_call */           static_cast<ternaryfunc>        (NULL),
        /* tp_str */            static_cast<reprfunc>           (NULL),
        /* tp_getattro */       static_cast<getattrofunc>       (PyObject_GenericGetAttr),
        /* tp_setattro */       static_cast<setattrofunc>       (PyObject_GenericSetAttr),
        /* tp_as_buffer */      static_cast<PyBufferProcs*>     (NULL),
        /* tp_flags */          static_cast<unsigned long>      (Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE),
        /* tp_doc */            static_cast<const char*>        (Some_doc_string),
        /* tp_traverse */       static_cast<traverseproc>       (NULL),
        /* tp_clear */          static_cast<inquiry>            (NULL),
        /* tp_richcompare */    static_cast<richcmpfunc>        (NULL),
        /* tp_weaklistoffset */ static_cast<Py_ssize_t>         (NULL),
        /* tp_iter */           static_cast<getiterfunc>        (NULL),
        /* tp_iternext */       static_cast<iternextfunc>       (NULL),
        /* tp_methods */        static_cast<struct PyMethodDef*>(NULL),
        /* tp_members */        static_cast<struct PyMemberDef*>(NULL),
        /* tp_getset */         static_cast<struct PyGetSetDef*>(NULL),
        /* tp_base */           static_cast<struct _typeobject*>(NULL),
        /* tp_dict */           static_cast<PyObject*>          (NULL),
        /* tp_descr_get */      static_cast<descrgetfunc>       (NULL),
        /* tp_descr_set */      static_cast<descrsetfunc>       (NULL),
        /* tp_dictoffset */     static_cast<Py_ssize_t>         (NULL),
        /* tp_init */           static_cast<initproc>           (NULL),
        /* tp_alloc */          static_cast<allocfunc>          (NULL),
        /* tp_new */            reinterpret_cast<newfunc>       (create_Some),
        /* tp_free */           static_cast<freefunc>           (NULL),
        /* tp_is_gc */          static_cast<inquiry>            (NULL),
        /* tp_bases */          static_cast<PyObject*>          (NULL),
        /* tp_mro */            static_cast<PyObject*>          (NULL),
        /* tp_cache */          static_cast<PyObject*>          (NULL),
        /* tp_subclasses */     static_cast<PyObject*>          (NULL),
        /* tp_weaklist */       static_cast<PyObject*>          (NULL),
        /* tp_del */            static_cast<destructor>         (NULL),
        /* tp_version_tag */    static_cast<unsigned int>       (NULL),
        /* tp_finalize */       static_cast<destructor>         (NULL)
    }; /* Some_type_struct */

    /*} // namespace MOP
    */

    /* user helper functions */
    Some* new_Some() { return PyObject_NEW(Some, &Some_type_struct); }
    bool is_Some(PyObject* obj) { return PyObject_TypeCheck(obj, &Some_type_struct); }

    /*namespace MOP {
    */

    bool initialize_class_some(PyObject* module)
    {
        if (0 != PyType_Ready(&Some_type_struct))
        {
            CPPY_ERROR("Failed to readify class some for Python module");
            return false;
        }

        PyObject* object = reinterpret_cast<PyObject*>(&Some_type_struct);
        Py_INCREF(object);
        if (0 != PyModule_AddObject(module, "some", object))
        {
            Py_DECREF(object);
            CPPY_ERROR("Failed to add class some to Python module");
            return false;
        }
        return true;
    }

    /* ---- class vec ---- */

    static const char* VectorBase_doc_string = "The basic vector class";

    /* ---- vec methods ---- */
    static PyMethodDef VectorBase_method_struct[] =
    {
        { "copy", reinterpret_cast<PyCFunction>(MO::PYTHON::vec_copy), METH_NOARGS, "" },
        { "test", reinterpret_cast<PyCFunction>(MO::PYTHON::vec_test), METH_VARARGS, "" },

        { NULL, NULL, 0, NULL }
    };

    /* ---- vec sequence methods ---- */
    /* https://docs.python.org/3/c-api/typeobj.html#sequence-object-structures */
    static PySequenceMethods VectorBase_as_sequence_struct =
    {
        /* sq_length */         static_cast<lenfunc>        (MO::PYTHON::vec_len),
        /* sq_concat */         static_cast<binaryfunc>     (NULL),
        /* sq_repeat */         static_cast<ssizeargfunc>   (NULL),
        /* sq_item */           static_cast<ssizeargfunc>   (MO::PYTHON::vec_getitem),
        /* was_sq_slice */      static_cast<void*>          (NULL),
        /* sq_ass_item */       static_cast<ssizeobjargproc>(MO::PYTHON::vec_setitem),
        /* was_sq_ass_slice */  static_cast<void*>          (NULL),
        /* sq_contains */       static_cast<objobjproc>     (NULL),
        /* sq_inplace_concat */ static_cast<binaryfunc>     (NULL),
        /* sq_inplace_repeat */ static_cast<ssizeargfunc>   (NULL)
    }; /* VectorBase_as_sequence_struct */

    /* https://docs.python.org/3/c-api/typeobj.html */
    static PyTypeObject VectorBase_type_struct =
    {
        PyVarObject_HEAD_INIT(NULL, 0)
        /* tp_name */           static_cast<const char*>        ("vec.vec"),
        /* tp_basicsize */      static_cast<Py_ssize_t>         (256),
        /* tp_itemsize */       static_cast<Py_ssize_t>         (NULL),
        /* tp_dealloc */        static_cast<destructor>         (MO::PYTHON::vec_free),
        /* tp_print */          static_cast<printfunc>          (NULL),
        /* tp_getattr */        static_cast<getattrfunc>        (NULL),
        /* tp_setattr */        static_cast<setattrfunc>        (NULL),
        /* tp_reserved */       static_cast<void*>              (NULL),
        /* tp_repr */           static_cast<reprfunc>           (MO::PYTHON::vec_repr),
        /* tp_as_number */      static_cast<PyNumberMethods*>   (NULL),
        /* tp_as_sequence */    static_cast<PySequenceMethods*> (&VectorBase_as_sequence_struct),
        /* tp_as_mapping */     static_cast<PyMappingMethods*>  (NULL),
        /* tp_hash */           static_cast<hashfunc>           (NULL),
        /* tp_call */           static_cast<ternaryfunc>        (NULL),
        /* tp_str */            static_cast<reprfunc>           (NULL),
        /* tp_getattro */       static_cast<getattrofunc>       (PyObject_GenericGetAttr),
        /* tp_setattro */       static_cast<setattrofunc>       (PyObject_GenericSetAttr),
        /* tp_as_buffer */      static_cast<PyBufferProcs*>     (NULL),
        /* tp_flags */          static_cast<unsigned long>      (Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE),
        /* tp_doc */            static_cast<const char*>        (VectorBase_doc_string),
        /* tp_traverse */       static_cast<traverseproc>       (NULL),
        /* tp_clear */          static_cast<inquiry>            (NULL),
        /* tp_richcompare */    static_cast<richcmpfunc>        (NULL),
        /* tp_weaklistoffset */ static_cast<Py_ssize_t>         (NULL),
        /* tp_iter */           static_cast<getiterfunc>        (NULL),
        /* tp_iternext */       static_cast<iternextfunc>       (NULL),
        /* tp_methods */        static_cast<struct PyMethodDef*>(VectorBase_method_struct),
        /* tp_members */        static_cast<struct PyMemberDef*>(NULL),
        /* tp_getset */         static_cast<struct PyGetSetDef*>(NULL),
        /* tp_base */           static_cast<struct _typeobject*>(NULL),
        /* tp_dict */           static_cast<PyObject*>          (NULL),
        /* tp_descr_get */      static_cast<descrgetfunc>       (NULL),
        /* tp_descr_set */      static_cast<descrsetfunc>       (NULL),
        /* tp_dictoffset */     static_cast<Py_ssize_t>         (NULL),
        /* tp_init */           static_cast<initproc>           (NULL),
        /* tp_alloc */          static_cast<allocfunc>          (NULL),
        /* tp_new */            reinterpret_cast<newfunc>       (MO::PYTHON::vec_new),
        /* tp_free */           static_cast<freefunc>           (NULL),
        /* tp_is_gc */          static_cast<inquiry>            (NULL),
        /* tp_bases */          static_cast<PyObject*>          (NULL),
        /* tp_mro */            static_cast<PyObject*>          (NULL),
        /* tp_cache */          static_cast<PyObject*>          (NULL),
        /* tp_subclasses */     static_cast<PyObject*>          (NULL),
        /* tp_weaklist */       static_cast<PyObject*>          (NULL),
        /* tp_del */            static_cast<destructor>         (NULL),
        /* tp_version_tag */    static_cast<unsigned int>       (NULL),
        /* tp_finalize */       static_cast<destructor>         (NULL)
    }; /* VectorBase_type_struct */

    /*} // namespace MOP
    */
    namespace MO {
    namespace PYTHON {

    /* user helper functions */
    VectorBase* new_VectorBase() { return PyObject_NEW(VectorBase, &VectorBase_type_struct); }
    bool is_VectorBase(PyObject* obj) { return PyObject_TypeCheck(obj, &VectorBase_type_struct); }
    } // namespace PYTHON
    } // namespace MO

    /*namespace MOP {
    */

    bool initialize_class_vec(PyObject* module)
    {
        if (0 != PyType_Ready(&VectorBase_type_struct))
        {
            CPPY_ERROR("Failed to readify class vec for Python module");
            return false;
        }

        PyObject* object = reinterpret_cast<PyObject*>(&VectorBase_type_struct);
        Py_INCREF(object);
        if (0 != PyModule_AddObject(module, "vec", object))
        {
            Py_DECREF(object);
            CPPY_ERROR("Failed to add class vec to Python module");
            return false;
        }
        return true;
    }

    /* ---- class _vec_iter ---- */

    static const char* VectorIter_doc_string = "Vector iterator";

    /* Creates new instance of _vec_iter class. */
    PyObject* create_VectorIter(struct _typeobject * type, PyObject *, PyObject *)
    {
        return PyObject_New(PyObject, type);
    }

    /* Deletes a _vec_iter instance */
    void destroy_VectorIter(PyObject* self)
    {
        self->ob_type->tp_free(self);
    }

    /* https://docs.python.org/3/c-api/typeobj.html */
    static PyTypeObject VectorIter_type_struct =
    {
        PyVarObject_HEAD_INIT(NULL, 0)
        /* tp_name */           static_cast<const char*>        ("vec._vec_iter"),
        /* tp_basicsize */      static_cast<Py_ssize_t>         (256),
        /* tp_itemsize */       static_cast<Py_ssize_t>         (NULL),
        /* tp_dealloc */        static_cast<destructor>         (destroy_VectorIter),
        /* tp_print */          static_cast<printfunc>          (NULL),
        /* tp_getattr */        static_cast<getattrfunc>        (NULL),
        /* tp_setattr */        static_cast<setattrfunc>        (NULL),
        /* tp_reserved */       static_cast<void*>              (NULL),
        /* tp_repr */           static_cast<reprfunc>           (NULL),
        /* tp_as_number */      static_cast<PyNumberMethods*>   (NULL),
        /* tp_as_sequence */    static_cast<PySequenceMethods*> (NULL),
        /* tp_as_mapping */     static_cast<PyMappingMethods*>  (NULL),
        /* tp_hash */           static_cast<hashfunc>           (NULL),
        /* tp_call */           static_cast<ternaryfunc>        (NULL),
        /* tp_str */            static_cast<reprfunc>           (NULL),
        /* tp_getattro */       static_cast<getattrofunc>       (PyObject_GenericGetAttr),
        /* tp_setattro */       static_cast<setattrofunc>       (PyObject_GenericSetAttr),
        /* tp_as_buffer */      static_cast<PyBufferProcs*>     (NULL),
        /* tp_flags */          static_cast<unsigned long>      (Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE),
        /* tp_doc */            static_cast<const char*>        (VectorIter_doc_string),
        /* tp_traverse */       static_cast<traverseproc>       (NULL),
        /* tp_clear */          static_cast<inquiry>            (NULL),
        /* tp_richcompare */    static_cast<richcmpfunc>        (NULL),
        /* tp_weaklistoffset */ static_cast<Py_ssize_t>         (NULL),
        /* tp_iter */           static_cast<getiterfunc>        (NULL),
        /* tp_iternext */       static_cast<iternextfunc>       (NULL),
        /* tp_methods */        static_cast<struct PyMethodDef*>(NULL),
        /* tp_members */        static_cast<struct PyMemberDef*>(NULL),
        /* tp_getset */         static_cast<struct PyGetSetDef*>(NULL),
        /* tp_base */           static_cast<struct _typeobject*>(NULL),
        /* tp_dict */           static_cast<PyObject*>          (NULL),
        /* tp_descr_get */      static_cast<descrgetfunc>       (NULL),
        /* tp_descr_set */      static_cast<descrsetfunc>       (NULL),
        /* tp_dictoffset */     static_cast<Py_ssize_t>         (NULL),
        /* tp_init */           static_cast<initproc>           (NULL),
        /* tp_alloc */          static_cast<allocfunc>          (NULL),
        /* tp_new */            reinterpret_cast<newfunc>       (create_VectorIter),
        /* tp_free */           static_cast<freefunc>           (NULL),
        /* tp_is_gc */          static_cast<inquiry>            (NULL),
        /* tp_bases */          static_cast<PyObject*>          (NULL),
        /* tp_mro */            static_cast<PyObject*>          (NULL),
        /* tp_cache */          static_cast<PyObject*>          (NULL),
        /* tp_subclasses */     static_cast<PyObject*>          (NULL),
        /* tp_weaklist */       static_cast<PyObject*>          (NULL),
        /* tp_del */            static_cast<destructor>         (NULL),
        /* tp_version_tag */    static_cast<unsigned int>       (NULL),
        /* tp_finalize */       static_cast<destructor>         (NULL)
    }; /* VectorIter_type_struct */

    /*} // namespace MOP
    */
    namespace MO {
    namespace PYTHON {

    /* user helper functions */
    VectorIter* new_VectorIter() { return PyObject_NEW(VectorIter, &VectorIter_type_struct); }
    bool is_VectorIter(PyObject* obj) { return PyObject_TypeCheck(obj, &VectorIter_type_struct); }
    } // namespace PYTHON
    } // namespace MO

    /*namespace MOP {
    */

    bool initialize_class__vec_iter(PyObject* module)
    {
        if (0 != PyType_Ready(&VectorIter_type_struct))
        {
            CPPY_ERROR("Failed to readify class _vec_iter for Python module");
            return false;
        }

        PyObject* object = reinterpret_cast<PyObject*>(&VectorIter_type_struct);
        Py_INCREF(object);
        if (0 != PyModule_AddObject(module, "_vec_iter", object))
        {
            Py_DECREF(object);
            CPPY_ERROR("Failed to add class _vec_iter to Python module");
            return false;
        }
        return true;
    }

    /* module definition for 'vec' */
    static const char* module_struct_doc = "The module documentation";
    static PyModuleDef module_struct =
    {
        PyModuleDef_HEAD_INIT,
        /* m_name */     static_cast<const char*> ("vec"),
        /* m_doc */      static_cast<const char*> (module_struct_doc),
        /* m_size */     static_cast<Py_ssize_t>  (-1),
        /* m_methods */  static_cast<PyMethodDef*>(nullptr),
        /* m_reload */   static_cast<inquiry>     (NULL),
        /* m_traverse */ static_cast<traverseproc>(NULL),
        /* m_clear */    static_cast<inquiry>     (NULL),
        /* m_free */     static_cast<freefunc>    (NULL)
    }; /* module_struct */

} // extern "C"

namespace MOP {



namespace {

    PyMODINIT_FUNC create_module_vec_func()
    {
        auto module = PyModule_Create(&module_struct);
        if (!module)
            return nullptr;

        // add classes to module
        initialize_class_some(module);
        initialize_class_vec(module);
        initialize_class__vec_iter(module);

        return module;
    }

} // namespace

bool initialize_module_vec()
{
    PyImport_AppendInittab("vec", create_module_vec_func);
    return true;
}


} // namespace MOP

